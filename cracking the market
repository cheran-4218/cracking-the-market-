import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Step 1: Load historical stock data
def get_stock_data(ticker, start='2015-01-01', end='2024-01-01'):
    df = yf.download(ticker, start=start, end=end)
    return df[['Close']]

# Step 2: Preprocess the data
def preprocess_data(df, look_back=60):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(df)

    X, y = [], []
    for i in range(look_back, len(scaled_data)):
        X.append(scaled_data[i-look_back:i, 0])
        y.append(scaled_data[i, 0])
    
    X, y = np.array(X), np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # LSTM expects 3D input
    return X, y, scaler

# Step 3: Build the LSTM model
def build_model(input_shape):
    model = Sequential([
        LSTM(50, return_sequences=True, input_shape=input_shape),
        Dropout(0.2),
        LSTM(50, return_sequences=False),
        Dropout(0.2),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Step 4: Train and test
def train_and_predict(ticker):
    df = get_stock_data(ticker)
    train_size = int(len(df) * 0.8)
    train, test = df[:train_size], df[train_size - 60:]  # Include last 60 days of train for test input

    X_train, y_train, scaler = preprocess_data(train)
    X_test, y_test, _ = preprocess_data(test)

    model = build_model((X_train.shape[1], 1))
    model.fit(X_train, y_train, epochs=20, batch_size=32)

    predictions = model.predict(X_test)
    predictions = scaler.inverse_transform(predictions.reshape(-1, 1))
    actual = scaler.inverse_transform(y_test.reshape(-1, 1))

    # Plot the results
    plt.figure(figsize=(14, 6))
    plt.plot(actual, label='Actual Price')
    plt.plot(predictions, label='Predicted Price')
    plt.title(f'{ticker} Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('Price')
    plt.legend()
    plt.show()

# Run the program
if __name__ == "__main__":
    train_and_predict('AAPL')  # You can change 'AAPL' to any other ticker
