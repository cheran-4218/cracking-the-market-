import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Step 1: Load Data
def load_stock_data(ticker='AAPL', period='5y'):
    df = yf.download(ticker, period=period)
    return df[['Close']]

# Step 2: Preprocess Data
def preprocess_data(data, sequence_length=60):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)

    X, y = [], []
    for i in range(sequence_length, len(scaled_data)):
        X.append(scaled_data[i-sequence_length:i, 0])
        y.append(scaled_data[i, 0])

    X = np.array(X)
    y = np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # [samples, time steps, features]
    return X, y, scaler

# Step 3: Build LSTM Model
def build_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(units=50))
    model.add(Dense(1))  # Predict next closing price
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Step 4: Train and Predict
def train_and_predict(model, X_train, y_train, data, scaler, sequence_length=60):
    model.fit(X_train, y_train, epochs=10, batch_size=32)

    test_data = data[-(sequence_length + 100):]
    scaled_test_data = scaler.transform(test_data)

    X_test = []
    for i in range(sequence_length, len(scaled_test_data)):
        X_test.append(scaled_test_data[i-sequence_length:i, 0])
    X_test = np.array(X_test)
    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

    predictions = model.predict(X_test)
    predictions = scaler.inverse_transform(predictions)

    actual_prices = test_data[sequence_length:]
    return actual_prices, predictions

# Step 5: Visualize
def plot_predictions(actual, predicted, title='Stock Price Prediction'):
    plt.figure(figsize=(12, 6))
    plt.plot(actual.values, label='Actual Price')
    plt.plot(predicted, label='Predicted Price')
    plt.title(title)
    plt.xlabel('Time')
    plt.ylabel('Price')
    plt.legend()
    plt.show()

# Main Execution
if __name__ == "__main__":
    ticker = 'AAPL'  # or any stock symbol
    df = load_stock_data(ticker)
    
    X_train, y_train, scaler = preprocess_data(df.values)
    model = build_model((X_train.shape[1], 1))
    
    actual, predicted = train_and_predict(model, X_train, y_train, df.values, scaler)
    
    plot_predictions(pd.DataFrame(actual), predicted, f'{ticker} Stock Price Prediction')
